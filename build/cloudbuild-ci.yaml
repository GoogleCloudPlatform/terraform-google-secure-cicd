# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Pipeline Setup
#   Maven cache to reduce calls to Maven Central
# test (in parallel)
#   Secrets Scanner: secrets scanner
#   License checking: ???
# Build
#   Skaffold build
# After Build
#   Artifact Structure Test: Container structure test
#   Image Vulnerabilities: CVE scanner
# Security Testing Gate
#   Attestation

timeout: "3600s" # 1 hour
tags:
  - "secure-cicd-ci"
substitutions:
  _ATTESTOR_NAME: "security-attestor"
options:
  # Use higher CPU machines so the caching and build steps are faster.
  machineType: 'N1_HIGHCPU_32'
  substitution_option: 'ALLOW_LOOSE'
artifacts:
  objects:
    location: gs://$_CACHE_BUCKET_NAME/artifacts
    paths:
      - 'build-artifacts.json'
steps:

###############################  Securing Source Code ###########################

# Secrets Scanner (TODO: Switch to Talisman)
- name: golang:1.15-buster
  id: test-source-secrets
  entrypoint: 'bash'
  args:
  - '-xe'
  - '-c'
  - |
    go get -u github.com/ezekg/git-hound
    git-hound -config policies/githound.yaml sniff > githound-output.txt
    cat githound-output.txt
  waitFor: ['-']


###############################  Build Containers ###########################

# Create build-installation-image
- name: $_DEFAULT_REGION-docker.pkg.dev/$PROJECT_ID/$_GAR_REPOSITORY/skaffold-builder
  id: "build-images"
  entrypoint: "/bin/bash"
  args:
    - '-xe'
    - -c
    - |
      # Replace gcr.io/bank-of-anthos to current project in skaffold.yaml
      sed -i "s|gcr.io/bank-of-anthos|$_DEFAULT_REGION-docker.pkg.dev/$PROJECT_ID/$_GAR_REPOSITORY|g" skaffold.yaml
      skaffold config set --global local-cluster false
      skaffold build --default-repo=$_DEFAULT_REGION-docker.pkg.dev/$PROJECT_ID/$_GAR_REPOSITORY --tag=$SHORT_SHA --file-output=/artifacts/build-artifacts.json
      sed -i "s|:latest||g" /artifacts/build-artifacts.json # remove the "latest" tag (complicates things later)
      cp /artifacts/build-artifacts.json ./build-artifacts.json # allow artifact copy mechanism to capture file (see 'artifacts' above)
      while read p; do
        echo "$p"
      done < /artifacts/build-artifacts.json
  volumes:
  - path: '/artifacts'
    name: 'artifacts'

################ Securing Artifacts Before Deployment ####################

### Container Struture Test
- name: 'gcr.io/cloud-builders/docker'
  id: "container-structure"
  entrypoint: "/bin/bash"
  args:
    - '-xe'
    - '-c'
    - |
      # install jq and container-structure-test
      apt-get -y install jq
      curl -LO https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64 \
      && chmod +x container-structure-test-linux-amd64 \
      && mv container-structure-test-linux-amd64 /usr/bin/container-structure-test

      # remove commit hash from string (need either tag or digest, not both)
      sed "s|:$SHORT_SHA||g" /artifacts/build-artifacts.json > /artifacts/build-artifacts-notag.json
      IMAGES=( $$(jq -r '.builds[].tag' /artifacts/build-artifacts-notag.json))
      for IMAGE in "$${IMAGES[@]}"; do
        docker pull "$${IMAGE}" # pull the remote image from GAR w/ digest SHA
        container-structure-test test --image "$${IMAGE}" --config policies/container-structure-policy.yaml
      done
  volumes:
  - path: '/artifacts'
    name: 'artifacts'
  waitFor: ['build-images']

### Container image analysis scanning (CVE Check)
- name: $_DEFAULT_REGION-docker.pkg.dev/$PROJECT_ID/$_GAR_REPOSITORY/skaffold-builder
  id: "container-scanner"
  entrypoint: "/bin/bash"
  args:
    - '-xe'
    - -c
    - |
      gcloud config set project ${PROJECT_ID}

      # remove commit hash from string (need either tag or digest, not both)
      sed "s|:$SHORT_SHA||g" /artifacts/build-artifacts.json > /artifacts/build-artifacts-notag.json
      IMAGES=( $$(jq -r '.builds[].tag' /artifacts/build-artifacts-notag.json))
      for IMAGE in "$${IMAGES[@]}"; do
        /signer \
        -v=10 \
        -alsologtostderr \
        -image="$${IMAGE}" \
        -policy=policies/container-analysis-policy.yaml \
        -vulnz_timeout=2m \
        -mode=check-only || error=true
        if [[ $error == true ]]; then echo "Container Analysis failed due to CVE thresholds being triggered"; exit 1; fi
      done
  volumes:
    - path: '/artifacts'
      name: 'artifacts'
  waitFor: ['build-images']

### Binary Authorization
- name: $_DEFAULT_REGION-docker.pkg.dev/$PROJECT_ID/$_GAR_REPOSITORY/skaffold-builder
  id: "binary-authorization-checkpoint"
  entrypoint: "/bin/bash"
  args:
    - '-xe'
    - -c
    - |
      gcloud config set project ${PROJECT_ID}
      sed "s|:$SHORT_SHA||g" /artifacts/build-artifacts.json > /artifacts/build-artifacts-notag.json
      IMAGES=( $$(jq -r '.builds[].tag' /artifacts/build-artifacts-notag.json))
      # Public Key for attestor
      PUBLIC_KEY_ID=$(gcloud container binauthz attestors describe ${_ATTESTOR_NAME} \
        --format='value(userOwnedGrafeasNote.publicKeys[0].id)')

      for IMAGE in "$${IMAGES[@]}"; do
        HAS_ATTESTATION=$(gcloud container binauthz attestations list \
            --project="${PROJECT_ID}" \
            --attestor="projects/${PROJECT_ID}/attestors/security-attestor" \
            --artifact-url="$${IMAGE}" \
            --format="value(name)")

        if [ -z $${HAS_ATTESTATION} ]; then
          gcloud beta container binauthz attestations sign-and-create \
            --artifact-url="$${IMAGE}" \
            --attestor="projects/${PROJECT_ID}/attestors/${_ATTESTOR_NAME}" \
            --keyversion=$( echo "$${PUBLIC_KEY_ID}" | sed "s|//cloudkms.googleapis.com/v1/||" )


        fi
      done
  volumes:
    - path: '/artifacts'
      name: 'artifacts'
  waitFor:
    - 'container-structure'
    - 'container-scanner'

## Hydrate manifests and push to wet repo
- name: $_DEFAULT_REGION-docker.pkg.dev/$PROJECT_ID/$_GAR_REPOSITORY/skaffold-builder
  id: "commit-upstream"
  entrypoint: "/bin/bash"
  args:
    - '-xe'
    - -c
    - |
      PATTERN='^.*\/([a-zA-Z-]+)$$$'
      sed "s|:$SHORT_SHA||g" /artifacts/build-artifacts.json > /artifacts/build-artifacts-notag.json
      IMAGES=( $$(jq -r '.builds[].tag' /artifacts/build-artifacts-notag.json))
      IMAGE_NAMES=( $$(jq -r '.builds[].imageName' /artifacts/build-artifacts-notag.json))

      cd /workspace

      # Clone the DRY repo
      gcloud config set project ${PROJECT_ID}
      gcloud source repos clone $_MANIFEST_DRY_REPO --project=${PROJECT_ID}

      # Clone the WET repo
      gcloud source repos clone $_MANIFEST_WET_REPO --project=${PROJECT_ID}
      git -C /workspace/$_MANIFEST_WET_REPO checkout -b $_WET_BRANCH_NAME
      git -C /workspace/$_MANIFEST_WET_REPO merge master
      mkdir /workspace/$_MANIFEST_WET_REPO/manifests

      for IMAGE in "$${IMAGE_NAMES[@]}"; do

          [[ $$IMAGE =~ $$PATTERN ]]
          IMG=$${BASH_REMATCH[1]}

          GAR="$_DEFAULT_REGION-docker.pkg.dev/$PROJECT_ID/$_GAR_REPOSITORY/$${IMG}*"
          GCR="gcr.io/$PROJECT_ID/$${IMG}*"
          BOA="gcr.io/bank-of-anthos/$${IMG}*"
          FULL_IMAGE="$${IMAGES[$$INDEX]}"
          yq eval '(.spec | select(documentIndex == 0) |.template.spec.containers[].image | select(. == "'$$GAR'" or . == "'$$GCR'" or . == "'$$BOA'")) |= "'$$FULL_IMAGE'"' /workspace/$_MANIFEST_DRY_REPO/$$IMG.yaml > /workspace/$_MANIFEST_WET_REPO/manifests/$$IMG.yaml

      done

      ## Go into wet repo and commit changes
      cd /workspace/$_MANIFEST_WET_REPO
      git config --global user.email "cicd-agent@secure-cicd.com" # TODO: variable with custom domain group alias
      git config --global user.name "Secure CICD Build Agent (automated)" # TODO: app name var
      git branch --set-upstream-to=origin/$_WET_BRANCH_NAME
      git add .
      git commit -m 'new deployment of applications'
      git status
      git push --force

  volumes:
    - path: '/artifacts'
      name: 'artifacts'
  waitFor:
    - 'binary-authorization-checkpoint'