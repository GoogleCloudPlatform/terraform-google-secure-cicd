# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

timeout: "3600s" # 1 hour
tags:
  - "secure-cicd-cd"
substitutions:
options:
  pool:
    name: $_CLOUDBUILD_PRIVATE_POOL 
  substitution_option: 'ALLOW_LOOSE'
  # machineType: 'E2_HIGHCPU_32'
artifacts:
  objects:
    location: gs://$_CACHE_BUCKET_NAME/artifacts/$BRANCH_NAME
    paths:
      - '/workspace/svcs-endpoints-filtered.json'
steps:

############################### Deploy to Cluster ###########################

- name: "gcr.io/cloud-builders/gke-deploy"
  id: "deploy-to-cluster"
  args: ['apply', '-f', 'manifests', '-p', '$_CLUSTER_PROJECT', '-c', '$_CLUSTER_NAME', '-l', '$_DEFAULT_REGION']

############################### Post-Deploy Checks ###########################

# Get endpoint IPs
- name: $_DEFAULT_REGION-docker.pkg.dev/$PROJECT_ID/$_GAR_REPOSITORY/skaffold-builder
  id: "get-svc-endpoints"
  entrypoint: "/bin/bash"
  args:
    - '-xe'
    - -c
    - |
      gcloud config set project $_CLUSTER_PROJECT
      gcloud container clusters get-credentials $_CLUSTER_NAME --region=$_DEFAULT_REGION
      kubectl get svc -ojson > /workspace/svcs.json

      ### Do we need a version that runs against private IP'd svcs?
      # jq '[.items[] | ({svc: .metadata.name, endpoint: "\(.spec.clusterIPs[]):\(.spec.ports[].port)"}), (select(.status.loadBalancer.ingress != null) | {svc: .metadata.name, endpoint: "\(.status.loadBalancer.ingress[].ip):\(.spec.ports[].port)"})]' /workspace/svcs.json > /workspace/svcs-endpoints-filtered.json
      
      ### Below only grabs external IP'd svcs
      jq '[.items[] | (select(.status.loadBalancer.ingress != null) | {svc: .metadata.name, endpoint: "\(.status.loadBalancer.ingress[].ip):\(.spec.ports[].port)"})]' /workspace/svcs.json > /workspace/svcs-endpoints-filtered.json

      SVC_NAMES=( $$(jq -r '.[].svc' /workspace/svcs-endpoints-filtered.json))
      ENDPOINTS=( $$(jq -r '.[].endpoint' /workspace/svcs-endpoints-filtered.json))
      echo $$SVC_NAMES > /workspace/svc_names_env.txt
      echo $$ENDPOINTS > /workspace/endpoints_env.txt
  waitFor: 
    - 'deploy-to-cluster'

# ZAProxy Scan
- name: 'gcr.io/cloud-builders/docker'
  id: "zaproxy-endpoint-scan"
  entrypoint: "bash"
  args:
    - -c
    - |
      SVC_NAMES=( $$(cat /workspace/svc_names_env.txt))
      ENDPOINTS=( $$(cat /workspace/endpoints_env.txt))

      INDEX=0
      for SVC in "$${SVC_NAMES[@]}"; do
          echo "$$SVC"
          ENDPOINT="$${ENDPOINTS[$$INDEX]}"
          echo "Checking $$ENDPOINT"

          docker run owasp/zap2docker-stable zap-cli quick-scan --self-contained --start-options '-config api.disablekey=true' http://$$ENDPOINT
          
          INDEX=$${INDEX}+1
      done
  waitFor: 
    - 'get-svc-endpoints'

# Binary Authorization
- name: $_DEFAULT_REGION-docker.pkg.dev/$PROJECT_ID/$_GAR_REPOSITORY/skaffold-builder
  id: "binary-authorization-checkpoint"
  entrypoint: "/bin/bash"
  args:
    - '-xe'
    - -c
    - |
      # Only run this step if there is an attestor supplied in the trigger substitutions
      # This step will be skipped for the final environment, when there are no more attestations to add
      if [ -n "${_ATTESTOR_NAME}" ]; then
        gcloud config set project ${PROJECT_ID}

        gsutil cp gs://$_CACHE_BUCKET_NAME/artifacts/build-artifacts-notag.json /artifacts/build-artifacts-notag.json
        IMAGES=( $$(jq -r '.builds[].tag' /artifacts/build-artifacts-notag.json))

        # Public Key for attestor
        PUBLIC_KEY_ID=$(gcloud container binauthz attestors describe ${_ATTESTOR_NAME} \
          --format='value(userOwnedGrafeasNote.publicKeys[0].id)')

        for IMAGE in "$${IMAGES[@]}"; do
          HAS_ATTESTATION=$(gcloud container binauthz attestations list \
              --project="${PROJECT_ID}" \
              --attestor="${_ATTESTOR_NAME}" \
              --artifact-url="$${IMAGE}" \
              --format="value(name)")

          if [ -z $${HAS_ATTESTATION} ]; then
            gcloud beta container binauthz attestations sign-and-create \
              --artifact-url="$${IMAGE}" \
              --attestor="${_ATTESTOR_NAME}" \
              --keyversion=$( echo "$${PUBLIC_KEY_ID}" | sed "s|//cloudkms.googleapis.com/v1/||" )

          fi
        done
      else 
        echo "_ATTESTOR_NAME not specified. No attestation to add."
      fi
  waitFor: 
    - 'zaproxy-endpoint-scan'

############################### Artifact Promotion ###########################

- name: $_DEFAULT_REGION-docker.pkg.dev/$PROJECT_ID/$_GAR_REPOSITORY/skaffold-builder
  id: "promote-manifests"
  entrypoint: "/bin/bash"
  args:
    - '-xe'
    - -c
    - |
      # Only run this step if there is a next environment supplied in the trigger substitutions
      # This step will be skipped for the final environment, when there are no more promotions to perform
      if [ -n "${_NEXT_ENV}" ]; then
        git config --global user.email "cicd-agent@secure-cicd.com" # TODO: variable with custom domain group alias
        git config --global user.name "Secure CICD Build Agent (automated)" # TODO: app name var

        # Clone the WET repo
        cd /workspace
        gcloud source repos clone $_MANIFEST_WET_REPO --project=${PROJECT_ID}
        git -C /workspace/$_MANIFEST_WET_REPO branch $_NEXT_ENV
        git -C /workspace/$_MANIFEST_WET_REPO checkout $_NEXT_ENV
        git -C /workspace/$_MANIFEST_WET_REPO branch --set-upstream-to=origin/$_NEXT_ENV || echo "$_NEXT_ENV branch does not yet exist"
        git -C /workspace/$_MANIFEST_WET_REPO pull --no-rebase || echo "$_NEXT_ENV branch does not yet exist"
        
        cd /workspace/$_MANIFEST_WET_REPO
        
        # Merge manifests up
        git status
        git merge origin/$BRANCH_NAME
        git add .
        git push -u origin $_NEXT_ENV
      else
        echo "_NEXT_ENV not specified. No further environment to promote to"
      fi
  waitFor: 
    - 'binary-authorization-checkpoint'
